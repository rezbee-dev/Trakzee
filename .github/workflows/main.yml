name: CICD

on:
  push:
    branches: ["main"]

env:
  # see for tr: https://linuxhint.com/bash_tr_command/
  # here, it converts all uppercase in GITHUB_REPOSITORY to lowercase
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])/app

jobs:
  test:
    name: Run tests & style-checks
    runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: postgres
    #     ports: ['5432:5432']
    #     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Pytest
        working-directory: ./api
        env:
          APP_SETTINGS: server.config.DevelopmentConfig
          DATABASE_TEST_URL: sqlite:///sqlite.db
          DATABASE_URL: sqlite:///sqlite.db
        run: |
          echo $DATABASE_TEST_URL
          python -m pytest "src/tests" -p no:warnings --maxfail=2
      - name: Flake8
        working-directory: ./api
        run: python -m flake8 src
      - name: Black
        working-directory: ./api
        run: python -m black --line-length 119 src --check
      - name: isort
        working-directory: ./api
        run: python -m isort src --check-only

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${CI_PAT} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          CI_PAT: ${{ secrets.CI_PAT }}
      - name: Pull images
        run: docker pull ${{ env.IMAGE }}:latest || true
      - name: Build images
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file Dockerfile.prod \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            "."
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: build
    env:
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${CI_PAT} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          CI_PAT: ${{ secrets.CI_PAT }}
      - name: Pull images
        run: docker pull ${{ env.IMAGE }}:latest || true
      - name: Build images
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file Dockerfile.prod \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            "."
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}:latest
      - name: Set environment variables
        run: |
          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
          echo "HEROKU_APP_NAME=${{ secrets.HEROKU_APP_NAME }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh
