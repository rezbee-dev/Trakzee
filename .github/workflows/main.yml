name: CICD

on:
  push:
    branches: ["main"]

env:
  # see for tr: https://linuxhint.com/bash_tr_command/
  # here, it converts all uppercase in GITHUB_REPOSITORY to lowercase
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])/app
  POSTGRES_DB: users
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: runner
  DATABASE_URL: postgresql://runner:runner@postgres:5432/users
  DATABASE_TEST_URL: postgresql://runner:runner@postgres:5432/users

jobs:
  test:
    name: Run tests & style-checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_TEST_URL: ${{ env.DATABASE_TEST_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Pytest
        working-directory: ./api
        env:
          FLASK_DEBUG: 1
          FLASK_ENV: development
          APP_SETTINGS: server.config.DevelopmentConfig
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DATABASE_TEST_URL: ${{ env.DATABASE_TEST_URL }}
        run: python -m pytest "src/tests" -p no:warnings
      - name: Flake8
        working-directory: ./api
        run: python -m flake8 src
      - name: Black
        working-directory: ./api
        run: python -m black src --check
      - name: isort
        working-directory: ./api
        run: python -m isort src --check-only

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${CI_PAT} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          CI_PAT: ${{ secrets.CI_PAT }}
      - name: Pull images
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build images
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file Dockerfile.prod \
            "."
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest